/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "sync_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




SyncStatus::~SyncStatus() noexcept {
}


void SyncStatus::__set_code(const int32_t val) {
  this->code = val;
}

void SyncStatus::__set_msg(const std::string& val) {
  this->msg = val;
}
std::ostream& operator<<(std::ostream& out, const SyncStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SyncStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;
  bool isset_msg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          isset_msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_msg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SyncStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SyncStatus");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SyncStatus &a, SyncStatus &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
}

SyncStatus::SyncStatus(const SyncStatus& other0) {
  code = other0.code;
  msg = other0.msg;
}
SyncStatus& SyncStatus::operator=(const SyncStatus& other1) {
  code = other1.code;
  msg = other1.msg;
  return *this;
}
void SyncStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SyncStatus(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ")";
}


ConfirmInfo::~ConfirmInfo() noexcept {
}


void ConfirmInfo::__set_address(const std::string& val) {
  this->address = val;
}

void ConfirmInfo::__set_uuid(const std::string& val) {
  this->uuid = val;
}

void ConfirmInfo::__set_partitionInterval(const int64_t val) {
  this->partitionInterval = val;
}

void ConfirmInfo::__set_version(const std::string& val) {
  this->version = val;
}
std::ostream& operator<<(std::ostream& out, const ConfirmInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ConfirmInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uuid);
          this->__isset.uuid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->partitionInterval);
          this->__isset.partitionInterval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfirmInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ConfirmInfo");

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uuid", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->uuid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("partitionInterval", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->partitionInterval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConfirmInfo &a, ConfirmInfo &b) {
  using ::std::swap;
  swap(a.address, b.address);
  swap(a.uuid, b.uuid);
  swap(a.partitionInterval, b.partitionInterval);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

ConfirmInfo::ConfirmInfo(const ConfirmInfo& other2) {
  address = other2.address;
  uuid = other2.uuid;
  partitionInterval = other2.partitionInterval;
  version = other2.version;
  __isset = other2.__isset;
}
ConfirmInfo& ConfirmInfo::operator=(const ConfirmInfo& other3) {
  address = other3.address;
  uuid = other3.uuid;
  partitionInterval = other3.partitionInterval;
  version = other3.version;
  __isset = other3.__isset;
  return *this;
}
void ConfirmInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ConfirmInfo(";
  out << "address=" << to_string(address);
  out << ", " << "uuid=" << to_string(uuid);
  out << ", " << "partitionInterval=" << to_string(partitionInterval);
  out << ", " << "version=" << to_string(version);
  out << ")";
}



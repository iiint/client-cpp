/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SyncService_H
#define SyncService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "sync_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SyncServiceIf {
 public:
  virtual ~SyncServiceIf() {}
  virtual void check(SyncStatus& _return, const ConfirmInfo& info) = 0;
  virtual void startSync(SyncStatus& _return) = 0;
  virtual void init(SyncStatus& _return, const std::string& storageGroupName) = 0;
  virtual void syncDeletedFileName(SyncStatus& _return, const std::string& fileName) = 0;
  virtual void initSyncData(SyncStatus& _return, const std::string& filename) = 0;
  virtual void syncData(SyncStatus& _return, const std::string& buff) = 0;
  virtual void checkDataMD5(SyncStatus& _return, const std::string& md5) = 0;
  virtual void endSync(SyncStatus& _return) = 0;
};

class SyncServiceIfFactory {
 public:
  typedef SyncServiceIf Handler;

  virtual ~SyncServiceIfFactory() {}

  virtual SyncServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SyncServiceIf* /* handler */) = 0;
};

class SyncServiceIfSingletonFactory : virtual public SyncServiceIfFactory {
 public:
  SyncServiceIfSingletonFactory(const ::std::shared_ptr<SyncServiceIf>& iface) : iface_(iface) {}
  virtual ~SyncServiceIfSingletonFactory() {}

  virtual SyncServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SyncServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SyncServiceIf> iface_;
};

class SyncServiceNull : virtual public SyncServiceIf {
 public:
  virtual ~SyncServiceNull() {}
  void check(SyncStatus& /* _return */, const ConfirmInfo& /* info */) {
    return;
  }
  void startSync(SyncStatus& /* _return */) {
    return;
  }
  void init(SyncStatus& /* _return */, const std::string& /* storageGroupName */) {
    return;
  }
  void syncDeletedFileName(SyncStatus& /* _return */, const std::string& /* fileName */) {
    return;
  }
  void initSyncData(SyncStatus& /* _return */, const std::string& /* filename */) {
    return;
  }
  void syncData(SyncStatus& /* _return */, const std::string& /* buff */) {
    return;
  }
  void checkDataMD5(SyncStatus& /* _return */, const std::string& /* md5 */) {
    return;
  }
  void endSync(SyncStatus& /* _return */) {
    return;
  }
};

typedef struct _SyncService_check_args__isset {
  _SyncService_check_args__isset() : info(false) {}
  bool info :1;
} _SyncService_check_args__isset;

class SyncService_check_args {
 public:

  SyncService_check_args(const SyncService_check_args&);
  SyncService_check_args& operator=(const SyncService_check_args&);
  SyncService_check_args() {
  }

  virtual ~SyncService_check_args() noexcept;
  ConfirmInfo info;

  _SyncService_check_args__isset __isset;

  void __set_info(const ConfirmInfo& val);

  bool operator == (const SyncService_check_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const SyncService_check_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_check_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_check_pargs {
 public:


  virtual ~SyncService_check_pargs() noexcept;
  const ConfirmInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_check_result__isset {
  _SyncService_check_result__isset() : success(false) {}
  bool success :1;
} _SyncService_check_result__isset;

class SyncService_check_result {
 public:

  SyncService_check_result(const SyncService_check_result&);
  SyncService_check_result& operator=(const SyncService_check_result&);
  SyncService_check_result() {
  }

  virtual ~SyncService_check_result() noexcept;
  SyncStatus success;

  _SyncService_check_result__isset __isset;

  void __set_success(const SyncStatus& val);

  bool operator == (const SyncService_check_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_check_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_check_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_check_presult__isset {
  _SyncService_check_presult__isset() : success(false) {}
  bool success :1;
} _SyncService_check_presult__isset;

class SyncService_check_presult {
 public:


  virtual ~SyncService_check_presult() noexcept;
  SyncStatus* success;

  _SyncService_check_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_startSync_args {
 public:

  SyncService_startSync_args(const SyncService_startSync_args&);
  SyncService_startSync_args& operator=(const SyncService_startSync_args&);
  SyncService_startSync_args() {
  }

  virtual ~SyncService_startSync_args() noexcept;

  bool operator == (const SyncService_startSync_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_startSync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_startSync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_startSync_pargs {
 public:


  virtual ~SyncService_startSync_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_startSync_result__isset {
  _SyncService_startSync_result__isset() : success(false) {}
  bool success :1;
} _SyncService_startSync_result__isset;

class SyncService_startSync_result {
 public:

  SyncService_startSync_result(const SyncService_startSync_result&);
  SyncService_startSync_result& operator=(const SyncService_startSync_result&);
  SyncService_startSync_result() {
  }

  virtual ~SyncService_startSync_result() noexcept;
  SyncStatus success;

  _SyncService_startSync_result__isset __isset;

  void __set_success(const SyncStatus& val);

  bool operator == (const SyncService_startSync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_startSync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_startSync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_startSync_presult__isset {
  _SyncService_startSync_presult__isset() : success(false) {}
  bool success :1;
} _SyncService_startSync_presult__isset;

class SyncService_startSync_presult {
 public:


  virtual ~SyncService_startSync_presult() noexcept;
  SyncStatus* success;

  _SyncService_startSync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_init_args__isset {
  _SyncService_init_args__isset() : storageGroupName(false) {}
  bool storageGroupName :1;
} _SyncService_init_args__isset;

class SyncService_init_args {
 public:

  SyncService_init_args(const SyncService_init_args&);
  SyncService_init_args& operator=(const SyncService_init_args&);
  SyncService_init_args() : storageGroupName() {
  }

  virtual ~SyncService_init_args() noexcept;
  std::string storageGroupName;

  _SyncService_init_args__isset __isset;

  void __set_storageGroupName(const std::string& val);

  bool operator == (const SyncService_init_args & rhs) const
  {
    if (!(storageGroupName == rhs.storageGroupName))
      return false;
    return true;
  }
  bool operator != (const SyncService_init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_init_pargs {
 public:


  virtual ~SyncService_init_pargs() noexcept;
  const std::string* storageGroupName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_init_result__isset {
  _SyncService_init_result__isset() : success(false) {}
  bool success :1;
} _SyncService_init_result__isset;

class SyncService_init_result {
 public:

  SyncService_init_result(const SyncService_init_result&);
  SyncService_init_result& operator=(const SyncService_init_result&);
  SyncService_init_result() {
  }

  virtual ~SyncService_init_result() noexcept;
  SyncStatus success;

  _SyncService_init_result__isset __isset;

  void __set_success(const SyncStatus& val);

  bool operator == (const SyncService_init_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_init_presult__isset {
  _SyncService_init_presult__isset() : success(false) {}
  bool success :1;
} _SyncService_init_presult__isset;

class SyncService_init_presult {
 public:


  virtual ~SyncService_init_presult() noexcept;
  SyncStatus* success;

  _SyncService_init_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_syncDeletedFileName_args__isset {
  _SyncService_syncDeletedFileName_args__isset() : fileName(false) {}
  bool fileName :1;
} _SyncService_syncDeletedFileName_args__isset;

class SyncService_syncDeletedFileName_args {
 public:

  SyncService_syncDeletedFileName_args(const SyncService_syncDeletedFileName_args&);
  SyncService_syncDeletedFileName_args& operator=(const SyncService_syncDeletedFileName_args&);
  SyncService_syncDeletedFileName_args() : fileName() {
  }

  virtual ~SyncService_syncDeletedFileName_args() noexcept;
  std::string fileName;

  _SyncService_syncDeletedFileName_args__isset __isset;

  void __set_fileName(const std::string& val);

  bool operator == (const SyncService_syncDeletedFileName_args & rhs) const
  {
    if (!(fileName == rhs.fileName))
      return false;
    return true;
  }
  bool operator != (const SyncService_syncDeletedFileName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_syncDeletedFileName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_syncDeletedFileName_pargs {
 public:


  virtual ~SyncService_syncDeletedFileName_pargs() noexcept;
  const std::string* fileName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_syncDeletedFileName_result__isset {
  _SyncService_syncDeletedFileName_result__isset() : success(false) {}
  bool success :1;
} _SyncService_syncDeletedFileName_result__isset;

class SyncService_syncDeletedFileName_result {
 public:

  SyncService_syncDeletedFileName_result(const SyncService_syncDeletedFileName_result&);
  SyncService_syncDeletedFileName_result& operator=(const SyncService_syncDeletedFileName_result&);
  SyncService_syncDeletedFileName_result() {
  }

  virtual ~SyncService_syncDeletedFileName_result() noexcept;
  SyncStatus success;

  _SyncService_syncDeletedFileName_result__isset __isset;

  void __set_success(const SyncStatus& val);

  bool operator == (const SyncService_syncDeletedFileName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_syncDeletedFileName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_syncDeletedFileName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_syncDeletedFileName_presult__isset {
  _SyncService_syncDeletedFileName_presult__isset() : success(false) {}
  bool success :1;
} _SyncService_syncDeletedFileName_presult__isset;

class SyncService_syncDeletedFileName_presult {
 public:


  virtual ~SyncService_syncDeletedFileName_presult() noexcept;
  SyncStatus* success;

  _SyncService_syncDeletedFileName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_initSyncData_args__isset {
  _SyncService_initSyncData_args__isset() : filename(false) {}
  bool filename :1;
} _SyncService_initSyncData_args__isset;

class SyncService_initSyncData_args {
 public:

  SyncService_initSyncData_args(const SyncService_initSyncData_args&);
  SyncService_initSyncData_args& operator=(const SyncService_initSyncData_args&);
  SyncService_initSyncData_args() : filename() {
  }

  virtual ~SyncService_initSyncData_args() noexcept;
  std::string filename;

  _SyncService_initSyncData_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const SyncService_initSyncData_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const SyncService_initSyncData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_initSyncData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_initSyncData_pargs {
 public:


  virtual ~SyncService_initSyncData_pargs() noexcept;
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_initSyncData_result__isset {
  _SyncService_initSyncData_result__isset() : success(false) {}
  bool success :1;
} _SyncService_initSyncData_result__isset;

class SyncService_initSyncData_result {
 public:

  SyncService_initSyncData_result(const SyncService_initSyncData_result&);
  SyncService_initSyncData_result& operator=(const SyncService_initSyncData_result&);
  SyncService_initSyncData_result() {
  }

  virtual ~SyncService_initSyncData_result() noexcept;
  SyncStatus success;

  _SyncService_initSyncData_result__isset __isset;

  void __set_success(const SyncStatus& val);

  bool operator == (const SyncService_initSyncData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_initSyncData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_initSyncData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_initSyncData_presult__isset {
  _SyncService_initSyncData_presult__isset() : success(false) {}
  bool success :1;
} _SyncService_initSyncData_presult__isset;

class SyncService_initSyncData_presult {
 public:


  virtual ~SyncService_initSyncData_presult() noexcept;
  SyncStatus* success;

  _SyncService_initSyncData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_syncData_args__isset {
  _SyncService_syncData_args__isset() : buff(false) {}
  bool buff :1;
} _SyncService_syncData_args__isset;

class SyncService_syncData_args {
 public:

  SyncService_syncData_args(const SyncService_syncData_args&);
  SyncService_syncData_args& operator=(const SyncService_syncData_args&);
  SyncService_syncData_args() : buff() {
  }

  virtual ~SyncService_syncData_args() noexcept;
  std::string buff;

  _SyncService_syncData_args__isset __isset;

  void __set_buff(const std::string& val);

  bool operator == (const SyncService_syncData_args & rhs) const
  {
    if (!(buff == rhs.buff))
      return false;
    return true;
  }
  bool operator != (const SyncService_syncData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_syncData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_syncData_pargs {
 public:


  virtual ~SyncService_syncData_pargs() noexcept;
  const std::string* buff;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_syncData_result__isset {
  _SyncService_syncData_result__isset() : success(false) {}
  bool success :1;
} _SyncService_syncData_result__isset;

class SyncService_syncData_result {
 public:

  SyncService_syncData_result(const SyncService_syncData_result&);
  SyncService_syncData_result& operator=(const SyncService_syncData_result&);
  SyncService_syncData_result() {
  }

  virtual ~SyncService_syncData_result() noexcept;
  SyncStatus success;

  _SyncService_syncData_result__isset __isset;

  void __set_success(const SyncStatus& val);

  bool operator == (const SyncService_syncData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_syncData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_syncData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_syncData_presult__isset {
  _SyncService_syncData_presult__isset() : success(false) {}
  bool success :1;
} _SyncService_syncData_presult__isset;

class SyncService_syncData_presult {
 public:


  virtual ~SyncService_syncData_presult() noexcept;
  SyncStatus* success;

  _SyncService_syncData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SyncService_checkDataMD5_args__isset {
  _SyncService_checkDataMD5_args__isset() : md5(false) {}
  bool md5 :1;
} _SyncService_checkDataMD5_args__isset;

class SyncService_checkDataMD5_args {
 public:

  SyncService_checkDataMD5_args(const SyncService_checkDataMD5_args&);
  SyncService_checkDataMD5_args& operator=(const SyncService_checkDataMD5_args&);
  SyncService_checkDataMD5_args() : md5() {
  }

  virtual ~SyncService_checkDataMD5_args() noexcept;
  std::string md5;

  _SyncService_checkDataMD5_args__isset __isset;

  void __set_md5(const std::string& val);

  bool operator == (const SyncService_checkDataMD5_args & rhs) const
  {
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const SyncService_checkDataMD5_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_checkDataMD5_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_checkDataMD5_pargs {
 public:


  virtual ~SyncService_checkDataMD5_pargs() noexcept;
  const std::string* md5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_checkDataMD5_result__isset {
  _SyncService_checkDataMD5_result__isset() : success(false) {}
  bool success :1;
} _SyncService_checkDataMD5_result__isset;

class SyncService_checkDataMD5_result {
 public:

  SyncService_checkDataMD5_result(const SyncService_checkDataMD5_result&);
  SyncService_checkDataMD5_result& operator=(const SyncService_checkDataMD5_result&);
  SyncService_checkDataMD5_result() {
  }

  virtual ~SyncService_checkDataMD5_result() noexcept;
  SyncStatus success;

  _SyncService_checkDataMD5_result__isset __isset;

  void __set_success(const SyncStatus& val);

  bool operator == (const SyncService_checkDataMD5_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_checkDataMD5_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_checkDataMD5_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_checkDataMD5_presult__isset {
  _SyncService_checkDataMD5_presult__isset() : success(false) {}
  bool success :1;
} _SyncService_checkDataMD5_presult__isset;

class SyncService_checkDataMD5_presult {
 public:


  virtual ~SyncService_checkDataMD5_presult() noexcept;
  SyncStatus* success;

  _SyncService_checkDataMD5_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SyncService_endSync_args {
 public:

  SyncService_endSync_args(const SyncService_endSync_args&);
  SyncService_endSync_args& operator=(const SyncService_endSync_args&);
  SyncService_endSync_args() {
  }

  virtual ~SyncService_endSync_args() noexcept;

  bool operator == (const SyncService_endSync_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SyncService_endSync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_endSync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SyncService_endSync_pargs {
 public:


  virtual ~SyncService_endSync_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_endSync_result__isset {
  _SyncService_endSync_result__isset() : success(false) {}
  bool success :1;
} _SyncService_endSync_result__isset;

class SyncService_endSync_result {
 public:

  SyncService_endSync_result(const SyncService_endSync_result&);
  SyncService_endSync_result& operator=(const SyncService_endSync_result&);
  SyncService_endSync_result() {
  }

  virtual ~SyncService_endSync_result() noexcept;
  SyncStatus success;

  _SyncService_endSync_result__isset __isset;

  void __set_success(const SyncStatus& val);

  bool operator == (const SyncService_endSync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SyncService_endSync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncService_endSync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SyncService_endSync_presult__isset {
  _SyncService_endSync_presult__isset() : success(false) {}
  bool success :1;
} _SyncService_endSync_presult__isset;

class SyncService_endSync_presult {
 public:


  virtual ~SyncService_endSync_presult() noexcept;
  SyncStatus* success;

  _SyncService_endSync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SyncServiceClient : virtual public SyncServiceIf {
 public:
  SyncServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SyncServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void check(SyncStatus& _return, const ConfirmInfo& info);
  void send_check(const ConfirmInfo& info);
  void recv_check(SyncStatus& _return);
  void startSync(SyncStatus& _return);
  void send_startSync();
  void recv_startSync(SyncStatus& _return);
  void init(SyncStatus& _return, const std::string& storageGroupName);
  void send_init(const std::string& storageGroupName);
  void recv_init(SyncStatus& _return);
  void syncDeletedFileName(SyncStatus& _return, const std::string& fileName);
  void send_syncDeletedFileName(const std::string& fileName);
  void recv_syncDeletedFileName(SyncStatus& _return);
  void initSyncData(SyncStatus& _return, const std::string& filename);
  void send_initSyncData(const std::string& filename);
  void recv_initSyncData(SyncStatus& _return);
  void syncData(SyncStatus& _return, const std::string& buff);
  void send_syncData(const std::string& buff);
  void recv_syncData(SyncStatus& _return);
  void checkDataMD5(SyncStatus& _return, const std::string& md5);
  void send_checkDataMD5(const std::string& md5);
  void recv_checkDataMD5(SyncStatus& _return);
  void endSync(SyncStatus& _return);
  void send_endSync();
  void recv_endSync(SyncStatus& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SyncServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SyncServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SyncServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_check(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startSync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_init(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncDeletedFileName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_initSyncData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkDataMD5(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_endSync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SyncServiceProcessor(::std::shared_ptr<SyncServiceIf> iface) :
    iface_(iface) {
    processMap_["check"] = &SyncServiceProcessor::process_check;
    processMap_["startSync"] = &SyncServiceProcessor::process_startSync;
    processMap_["init"] = &SyncServiceProcessor::process_init;
    processMap_["syncDeletedFileName"] = &SyncServiceProcessor::process_syncDeletedFileName;
    processMap_["initSyncData"] = &SyncServiceProcessor::process_initSyncData;
    processMap_["syncData"] = &SyncServiceProcessor::process_syncData;
    processMap_["checkDataMD5"] = &SyncServiceProcessor::process_checkDataMD5;
    processMap_["endSync"] = &SyncServiceProcessor::process_endSync;
  }

  virtual ~SyncServiceProcessor() {}
};

class SyncServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SyncServiceProcessorFactory(const ::std::shared_ptr< SyncServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SyncServiceIfFactory > handlerFactory_;
};

class SyncServiceMultiface : virtual public SyncServiceIf {
 public:
  SyncServiceMultiface(std::vector<std::shared_ptr<SyncServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SyncServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<SyncServiceIf> > ifaces_;
  SyncServiceMultiface() {}
  void add(::std::shared_ptr<SyncServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void check(SyncStatus& _return, const ConfirmInfo& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->check(_return, info);
    }
    ifaces_[i]->check(_return, info);
    return;
  }

  void startSync(SyncStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startSync(_return);
    }
    ifaces_[i]->startSync(_return);
    return;
  }

  void init(SyncStatus& _return, const std::string& storageGroupName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->init(_return, storageGroupName);
    }
    ifaces_[i]->init(_return, storageGroupName);
    return;
  }

  void syncDeletedFileName(SyncStatus& _return, const std::string& fileName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncDeletedFileName(_return, fileName);
    }
    ifaces_[i]->syncDeletedFileName(_return, fileName);
    return;
  }

  void initSyncData(SyncStatus& _return, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initSyncData(_return, filename);
    }
    ifaces_[i]->initSyncData(_return, filename);
    return;
  }

  void syncData(SyncStatus& _return, const std::string& buff) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncData(_return, buff);
    }
    ifaces_[i]->syncData(_return, buff);
    return;
  }

  void checkDataMD5(SyncStatus& _return, const std::string& md5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkDataMD5(_return, md5);
    }
    ifaces_[i]->checkDataMD5(_return, md5);
    return;
  }

  void endSync(SyncStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->endSync(_return);
    }
    ifaces_[i]->endSync(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SyncServiceConcurrentClient : virtual public SyncServiceIf {
 public:
  SyncServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SyncServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void check(SyncStatus& _return, const ConfirmInfo& info);
  int32_t send_check(const ConfirmInfo& info);
  void recv_check(SyncStatus& _return, const int32_t seqid);
  void startSync(SyncStatus& _return);
  int32_t send_startSync();
  void recv_startSync(SyncStatus& _return, const int32_t seqid);
  void init(SyncStatus& _return, const std::string& storageGroupName);
  int32_t send_init(const std::string& storageGroupName);
  void recv_init(SyncStatus& _return, const int32_t seqid);
  void syncDeletedFileName(SyncStatus& _return, const std::string& fileName);
  int32_t send_syncDeletedFileName(const std::string& fileName);
  void recv_syncDeletedFileName(SyncStatus& _return, const int32_t seqid);
  void initSyncData(SyncStatus& _return, const std::string& filename);
  int32_t send_initSyncData(const std::string& filename);
  void recv_initSyncData(SyncStatus& _return, const int32_t seqid);
  void syncData(SyncStatus& _return, const std::string& buff);
  int32_t send_syncData(const std::string& buff);
  void recv_syncData(SyncStatus& _return, const int32_t seqid);
  void checkDataMD5(SyncStatus& _return, const std::string& md5);
  int32_t send_checkDataMD5(const std::string& md5);
  void recv_checkDataMD5(SyncStatus& _return, const int32_t seqid);
  void endSync(SyncStatus& _return);
  int32_t send_endSync();
  void recv_endSync(SyncStatus& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif

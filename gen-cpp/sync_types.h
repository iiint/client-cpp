/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef sync_TYPES_H
#define sync_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class SyncStatus;

class ConfirmInfo;


class SyncStatus : public virtual ::apache::thrift::TBase {
 public:

  SyncStatus(const SyncStatus&);
  SyncStatus& operator=(const SyncStatus&);
  SyncStatus() : code(0), msg() {
  }

  virtual ~SyncStatus() noexcept;
  int32_t code;
  std::string msg;

  void __set_code(const int32_t val);

  void __set_msg(const std::string& val);

  bool operator == (const SyncStatus & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const SyncStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SyncStatus &a, SyncStatus &b);

std::ostream& operator<<(std::ostream& out, const SyncStatus& obj);

typedef struct _ConfirmInfo__isset {
  _ConfirmInfo__isset() : address(false), uuid(false), partitionInterval(false), version(false) {}
  bool address :1;
  bool uuid :1;
  bool partitionInterval :1;
  bool version :1;
} _ConfirmInfo__isset;

class ConfirmInfo : public virtual ::apache::thrift::TBase {
 public:

  ConfirmInfo(const ConfirmInfo&);
  ConfirmInfo& operator=(const ConfirmInfo&);
  ConfirmInfo() : address(), uuid(), partitionInterval(0), version() {
  }

  virtual ~ConfirmInfo() noexcept;
  std::string address;
  std::string uuid;
  int64_t partitionInterval;
  std::string version;

  _ConfirmInfo__isset __isset;

  void __set_address(const std::string& val);

  void __set_uuid(const std::string& val);

  void __set_partitionInterval(const int64_t val);

  void __set_version(const std::string& val);

  bool operator == (const ConfirmInfo & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    if (!(partitionInterval == rhs.partitionInterval))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const ConfirmInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfirmInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ConfirmInfo &a, ConfirmInfo &b);

std::ostream& operator<<(std::ostream& out, const ConfirmInfo& obj);



#endif
